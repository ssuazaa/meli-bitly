name: CI-CD pipeline
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  CI:
    name: CI-CD pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      SPRING_PROPERTIES: ${{ vars.SPRING_ENV_PROPERTIES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          audience: ${{ secrets.WIF_AUDIENCE }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ vars.REGION }}-docker.pkg.dev
      - name: Build image, tag and push
        id: build-image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ vars.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME }}:latest
      - name: Create Service declaration
        run: |-
          export SERVICE="${{ vars.SERVICE_NAME }}"
          export IMAGE="${{ vars.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME }}:latest"
          export SPRING_MONGODB_URI="${ SPRING_PROPERTIES_spring.data.mongodb.uri }"
          envsubst < ./.github/workflows/cloud-run-deploy.yml > service.yaml
          cat service.yaml
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          region: ${{ vars.REGION }}
          metadata: service.yaml
          env_vars: |
            ${{ vars.SPRING_ENV_PROPERTIES }}
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}